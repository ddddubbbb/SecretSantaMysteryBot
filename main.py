# main.py
import asyncio
import logging
import traceback
from typing import Optional, List, Dict, Any
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, InlineKeyboardButton, InlineKeyboardMarkup, 
    PreCheckoutQuery, LabeledPrice, ChatMemberOwner, ChatMemberAdministrator, ErrorEvent
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode, ChatType
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import sqlite3
import os
from contextlib import contextmanager
from datetime import datetime
import random
import hashlib

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
INSTANCE_ID = f"santa_bot_{hashlib.md5(f'{BOT_TOKEN}{os.getpid()}{datetime.now().timestamp()}'.encode()).hexdigest()[:8]}"

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# === –ü–ï–†–ï–í–û–î–´ ===
TEXTS = {
    'ru': {
        'start': "üéÅ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è *–¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã*.\n\n"
                 "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –∏ —è –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∏–≥—Ä—É —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏, —É–≥–∞–¥—ã–≤–∞–Ω–∏—è–º–∏ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å—é.",
        'help': "üìñ *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å*\n\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É\n"
                "2. –ù–∞–∑–Ω–∞—á—å—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–æ–º\n"
                "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –∏ –¥–∞—Ç—ã\n"
                "4. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n"
                "5. –ö–∞–∂–¥—ã–π –ø–∏—à–µ—Ç, —á—Ç–æ —Ö–æ—á–µ—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫ (/mygift)\n"
                "6. –í –¥–µ–Ω—å –∂–µ—Ä–µ–±—å—ë–≤–∫–∏ ‚Äî –≤—ã —É–∑–Ω–∞–µ—Ç–µ, –∫–æ–º—É –¥–∞—Ä–∏—Ç–µ\n"
                "7. –£–≥–∞–¥—ã–≤–∞–π—Ç–µ, –∫—Ç–æ –∑–∞ –∫–∞–∫–∏–º –Ω–∏–∫–æ–º ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –æ—á–∫–∏!\n"
                "8. –í –¥–µ–Ω—å —Ä–∞—Å–∫—Ä—ã—Ç–∏—è ‚Äî —Ñ–∏–Ω–∞–ª: —Ç–∞–±–ª–∏—Ü–∞, –∞—á–∏–≤–∫–∏, —Å–º–µ—Ö\n\n"
                "üîπ /setup ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É\n"
                "üîπ /mygift ‚Äî —É–∫–∞–∑–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ\n"
                "üîπ /santabingo ‚Äî —É–≥–∞–¥–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å\n"
                "üîπ /leaderboard ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
                "üîπ /lang ‚Äî —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n"
                "üîπ /premium ‚Äî –ø—Ä–µ–º–∏—É–º-–Ω–∏–∫–∏\n"
                "üîπ /donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å ‚≠ê",
        'donate': "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
                  "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã Telegram, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–æ—Ç–∞.",
        'setup_intro': "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–≥—Ä—ã:",
        'setup_prompt_draw': "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É –∂–µ—Ä–µ–±—å—ë–≤–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
        'setup_prompt_reveal': "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è (–∫–æ–≥–¥–∞ –ø–æ–∫–∞–∂–µ–º, –∫—Ç–æ –∑–∞ –∫–∞–∫–∏–º –Ω–∏–∫–æ–º):",
        'draw_set': "üéâ –ñ–µ—Ä–µ–±—å—ë–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {time}",
        'reveal_set': "üéâ –î–∞—Ç–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {time}",
        'invalid_date': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 25.12.2025 18:00",
        'game_active': "‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
        'gift_prompt': "üéÅ –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
        'gift_saved': "‚úÖ –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
        'draw_done': "üéâ –ñ–µ—Ä–µ–±—å—ë–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏—Ö '–ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö'.",
        'final_intro': "üéä –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã:\n\n",
        'ach_guess_master': "–ú–∞—Å—Ç–µ—Ä –£–≥–∞–¥—ã–≤–∞–Ω–∏—è",
        'ach_legend': "–õ–µ–≥–µ–Ω–¥–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∏",
        'leaderboard': "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n{list}",
        'santabingo_intro': "üîç –ö—Ç–æ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∑–∞ –Ω–∏–∫–æ–º *{nick}*?\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è:",
        'guess_correct': "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –æ—á–∫–æ",
        'guess_wrong': "‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –≠—Ç–æ –±—ã–ª {name}",
        'lang_changed': "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π",
        'theme_selected': "üé® –¢–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {theme}",
        'premium_intro': "‚ú® –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º-–Ω–∏–∫ –∑–∞ 50 –∑–≤—ë–∑–¥ Telegram!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω:",
        'nick_unlocked': "üéâ –ù–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {nick}\n\n‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –¢—ã —Å–¥–µ–ª–∞–ª –ø—Ä–∞–∑–¥–Ω–∏–∫ —è—Ä—á–µ!",
        'premium_sold': "üö´ –≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –∫—É–ø–ª–µ–Ω –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.",
        'auto_register_call': "üéÑ –ò–≥—Ä–∞ –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n\nüéÆ –•–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
        'joined_game': "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ —Å –Ω–∏–∫–æ–º {nick}!",
        'already_joined': "‚ÑπÔ∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ."
    },
    'en': {
        'start': "üéÅ Hi! I'm a *Secret Santa* bot.\n\n"
                 "Add me to a group and I'll help organize gifts, guessing, and anonymity.",
        'help': "üìñ *How to play*\n\n"
                "1. Add bot to group\n"
                "2. Make it admin\n"
                "3. Use /setup to choose theme and dates\n"
                "4. All members auto-registered\n"
                "5. Each writes their gift wish (/mygift)\n"
                "6. On draw day ‚Äî you'll know who to gift\n"
                "7. Guess who's behind nicks ‚Äî earn points!\n"
                "8. On reveal day ‚Äî final: leaderboard, achievements, fun\n\n"
                "üîπ /setup ‚Äî configure game\n"
                "üîπ /mygift ‚Äî set wish\n"
                "üîπ /santabingo ‚Äî guess identity\n"
                "üîπ /leaderboard ‚Äî leaderboard\n"
                "üîπ /lang ‚Äî change language\n"
                "üîπ /premium ‚Äî premium nicks\n"
                "üîπ /donate ‚Äî support ‚≠ê",
        'donate': "üôè Thank you for your support!\n\n"
                  "You can send Telegram Stars to help develop the bot.",
        'setup_intro': "üé® Choose game theme:",
        'setup_prompt_draw': "üìÖ Set draw date (DD.MM.YYYY HH:MM):",
        'setup_prompt_reveal': "üìÖ Set reveal date (when we show who was behind nicks):",
        'draw_set': "üéâ Draw set to {time}",
        'reveal_set': "üéâ Reveal date set to {time}",
        'invalid_date': "‚ùå Invalid format. Example: 12.31.2025 20:00",
        'game_active': "‚úÖ All members registered.",
        'gift_prompt': "üéÅ Write what you'd like to receive:",
        'gift_saved': "‚úÖ Your wish saved!",
        'draw_done': "üéâ Draw completed! Everyone got their target.",
        'final_intro': "üéä Game finished! All identities revealed:\n\n",
        'ach_guess_master': "Guessing Master",
        'ach_legend': "Party Legend",
        'leaderboard': "üèÜ Leaderboard:\n\n{list}",
        'santabingo_intro': "üîç Who is behind *{nick}*?\nChoose real name:",
        'guess_correct': "‚úÖ Correct! +1 point",
        'guess_wrong': "‚ùå Wrong. It was {name}",
        'lang_changed': "‚úÖ Language changed to English",
        'theme_selected': "üé® Theme set: {theme}",
        'premium_intro': "‚ú® Unlock a premium nick for 50 Telegram Stars!\nChoose one:",
        'nick_unlocked': "üéâ Nick unlocked: {nick}\n\n‚ú® Thank you for support! You made the party brighter!",
        'premium_sold': "üö´ This nick is already purchased by another player.",
        'auto_register_call': "üéÑ Secret Santa game is set up!\n\nüë• Participants: {count}\n\nüéÆ Want to participate? Click the button below!",
        'joined_game': "‚úÖ You joined the game with nick {nick}!",
        'already_joined': "‚ÑπÔ∏è You are already participating in the game."
    }
}

# === –ü–†–ï–ú–ò–£–ú-–ù–ò–ö–ò –ü–û –¢–ï–ú–ê–ú ===
PREMIUM_NICKS = {
    'ru': {
        'christmas': ["–°–∞–Ω—Ç–∞", "–ì—Ä–∏–Ω—á", "–°–∫—Ä—É–¥–∂", "–°–Ω–µ–≥—É—Ä–æ—á–∫–∞", "–ë–∞–±–∞ –Ø–≥–∞", "–°–Ω–µ–∂–Ω–∞—è –ö–æ—Ä–æ–ª–µ–≤–∞", "–î–µ–¥ –ú–æ—Ä–æ–∑", "–û–ª–∞—Ñ", "–≠–ª—å–∑–∞", "–ê–Ω–Ω–∞"],
        'halloween': ["–í–µ–¥—å–º–∞", "–ü—Ä–∏–∑—Ä–∞–∫", "–í–∞–º–ø–∏—Ä", "–û–±–æ—Ä–æ—Ç–µ–Ω—å", "–§—Ä–∞–Ω–∫–µ–Ω—à—Ç–µ–π–Ω", "–ó–æ–º–±–∏", "–ú—É–º–∏—è", "–ü—É–º-–ë—É–º", "–ß—ë—Ä–Ω–∞—è –ö–æ—à–∫–∞", "–î–∂–µ–∫-—Ñ–æ–Ω–∞—Ä—å"],
        'office': ["–î—É–∞–π—Ç", "–î–∂–∏–º", "–ú–∞–π–∫–ª", "–ü—Ä–∏–Ω—Ç–µ—Ä", "–°–∫—Ä–µ–ø–∫–∞", "–ö–æ—Ñ–µ", "–°—Ç–æ–ª", "–°—Ç—É–ª", "–õ–∞–º–ø–∞", "–ü–∞–ø–∫–∞"]
    },
    'en': {
        'christmas': ["Santa", "Grinch", "Scrooge", "Snegurochka", "Baba Yaga", "Snow Queen", "Father Frost", "Olaf", "Elsa", "Anna"],
        'halloween': ["Witch", "Ghost", "Vampire", "Werewolf", "Frankenstein", "Zombie", "Mummy", "Pumpking", "Black Cat", "JackOlantern"],
        'office': ["Dwight", "Jim", "Michael", "Printer", "Stapler", "Coffee", "Desk", "Chair", "Lamp", "Folder"]
    }
}

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
DB_NAME = "santa.db"

def init_db():
    with get_db() as db:
        db.execute('''
            CREATE TABLE IF NOT EXISTS games (
                chat_id TEXT PRIMARY KEY,
                lang TEXT DEFAULT 'ru',
                theme TEXT DEFAULT 'christmas',
                draw_time INTEGER,
                end_time INTEGER
            )
        ''')
        db.execute('''
            CREATE TABLE IF NOT EXISTS players (
                user_id TEXT,
                chat_id TEXT,
                full_name TEXT,
                nick TEXT,
                gift TEXT,
                score INTEGER DEFAULT 0,
                target_id TEXT,
                premium_nick TEXT,
                PRIMARY KEY (user_id, chat_id)
            )
        ''')
        db.execute('''
            CREATE TABLE IF NOT EXISTS achievements (
                player_id TEXT,
                name TEXT,
                PRIMARY KEY (player_id, name)
            )
        ''')
        db.commit()

@contextmanager
def get_db():
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row
    try:
        yield conn
        conn.commit()
    except Exception as e:
        print(f"DB Error: {e}")
        conn.rollback()
        raise
    finally:
        conn.close()

# === FSM ===
class GiftState(StatesGroup):
    waiting = State()

class SetupState(StatesGroup):
    choosing_theme = State()
    waiting_draw = State()
    waiting_reveal = State()

class PremiumState(StatesGroup):
    choosing = State()

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# === –§–£–ù–ö–¶–ò–ò ===
def sanitize_input(text: str, max_length: int = 1000) -> str:
    """–û—á–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    import re
    sanitized = re.sub(r'[<>"\';]', '', str(text)[:max_length])
    return sanitized.strip()

def get_lang(chat_id):
    try:
        with get_db() as db:
            row = db.execute('SELECT lang FROM games WHERE chat_id = ?', (str(chat_id),)).fetchone()
            return row['lang'] if row else 'ru'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
        return 'ru'

def get_theme(chat_id):
    try:
        with get_db() as db:
            row = db.execute('SELECT theme FROM games WHERE chat_id = ?', (str(chat_id),)).fetchone()
            return row['theme'] if row else 'christmas'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º—ã: {e}")
        return 'christmas'

def get_text(key, lang, **kwargs):
    return TEXTS[lang][key].format(**kwargs)

def generate_nick(theme):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã"""
    base_nicks = {
        'christmas': ["–°–∞–Ω—Ç–∞", "–≠–ª—å—Ñ", "–ú–æ—Ä–æ–∑", "–ü–æ–¥–∞—Ä–æ–∫", "–ù–æ–≤–æ–≥–æ–¥–∏–∫", "–°–Ω–µ–∂–æ–∫", "–û–ª–µ–Ω—å", "–ï–ª–æ—á–∫–∞"],
        'halloween': ["–ü—Ä–∏–∑—Ä–∞–∫", "–í–µ–¥—å–º–∞", "–¢—ã–∫–≤–∞", "–õ–µ—Ç—É—á–∞—è –ú—ã—à—å", "–ü–∞—É–∫", "–°–∫–µ–ª–µ—Ç", "–í–∞–º–ø–∏—Ä", "–û–±–æ—Ä–æ—Ç–µ–Ω—å"],
        'office': ["–ö–æ—Ñ–µ", "–ü—Ä–∏–Ω—Ç–µ—Ä", "–ü–∞–ø–∫–∞", "–°—Ç–µ–ø–ª–µ—Ä", "–ú–æ–Ω–∏—Ç–æ—Ä", "–°—Ç–æ–ª", "–°—Ç—É–ª", "–õ–∞–º–ø–∞"]
    }
    
    prefixes = base_nicks.get(theme, base_nicks['christmas'])
    suffixes = [str(i).zfill(2) for i in range(1, 99)]
    return random.choice(prefixes) + random.choice(suffixes)

async def is_admin(chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return isinstance(member, (ChatMemberOwner, ChatMemberAdministrator))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

async def register_user(user_id: str, chat_id: str, full_name: str, theme: str = 'christmas'):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–≥—Ä–µ"""
    try:
        with get_db() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            existing = db.execute('SELECT 1 FROM players WHERE user_id = ? AND chat_id = ?', (user_id, chat_id)).fetchone()
            if existing:
                return False  # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            
            nick = generate_nick(theme)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
            while db.execute('SELECT 1 FROM players WHERE nick = ? AND chat_id = ?', (nick, chat_id)).fetchone():
                nick = generate_nick(theme)
            
            db.execute('''
                INSERT INTO players (user_id, chat_id, full_name, nick)
                VALUES (?, ?, ?, ?)
            ''', (user_id, chat_id, full_name, nick))
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} ({user_id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∏–≥—Ä–µ {chat_id} —Å –Ω–∏–∫–æ–º {nick}")
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def auto_register_from_activity(chat_id: str, theme: str = 'christmas'):
    """
    –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ —É—á–∞—Å—Ç–∏—é.
    """
    try:
        with get_db() as db:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            result = db.execute('SELECT COUNT(*) as cnt FROM players WHERE chat_id = ?', (chat_id,)).fetchone()
            count = result['cnt'] if result else 0
        
        lang = get_lang(chat_id)
        message = get_text('auto_register_call', lang).format(count=count)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÑ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ", callback_data="join_game")]
        ])
        
        await bot.send_message(chat_id, message, reply_markup=kb)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–∏–∑—ã–≤ –∫ —É—á–∞—Å—Ç–∏—é –≤ —á–∞—Ç {chat_id}")
        return count
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {e}")
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return 0

# === –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ê–ù–î –í –ú–ï–ù–Æ ===
async def set_bot_commands():
    commands = [
        {"command": "start", "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
        {"command": "help", "description": "–ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ"},
        {"command": "setup", "description": "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä—É"},
        {"command": "mygift", "description": "–£–∫–∞–∑–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ"},
        {"command": "santabingo", "description": "–£–≥–∞–¥–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å"},
        {"command": "leaderboard", "description": "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"},
        {"command": "premium", "description": "–ü—Ä–µ–º–∏—É–º-–Ω–∏–∫–∏"},
        {"command": "lang", "description": "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"},
        {"command": "donate", "description": "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å ‚≠ê"}
    ]
    await bot.set_my_commands(commands)

# === –•–ï–ù–î–õ–ï–†–´ ===
@dp.message(Command("start"))
async def start(message: Message):
    lang = get_lang(message.chat.id)
    kb = [
        [InlineKeyboardButton(text="üåü –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", pay=True)],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    await message.answer(
        get_text('start', lang),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query(F.data == "help")
async def help(callback):
    lang = get_lang(callback.message.chat.id)
    await callback.message.edit_text(
        get_text('help', lang),
        parse_mode=ParseMode.MARKDOWN
    )

@dp.message(Command("setup"))
async def setup(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    if not await is_admin(message.chat.id, message.from_user.id):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏–≥—Ä—É.")
        return
    
    lang = get_lang(message.chat.id)
    kb = [
        [InlineKeyboardButton(text="üéÑ –†–æ–∂–¥–µ—Å—Ç–≤–æ", callback_data="theme_christmas")],
        [InlineKeyboardButton(text="üéÉ –•—ç–ª–ª–æ—É–∏–Ω", callback_data="theme_halloween")],
        [InlineKeyboardButton(text="üëî –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤", callback_data="theme_office")]
    ]
    await message.reply(get_text('setup_intro', lang), reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    await state.set_state(SetupState.choosing_theme)

@dp.callback_query(F.data.startswith("theme_"))
async def set_theme(callback, state: FSMContext):
    theme = callback.data.split("_")[1]
    chat_id = str(callback.message.chat.id)
    lang = get_lang(chat_id)
    
    with get_db() as db:
        db.execute('INSERT OR REPLACE INTO games (chat_id, theme) VALUES (?, ?)', (chat_id, theme))
    
    # –ü—Ä–∏–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    registered_count = await auto_register_from_activity(chat_id, theme)
    
    await callback.message.answer(get_text('setup_prompt_draw', lang))
    await state.set_state(SetupState.waiting_draw)

@dp.message(SetupState.waiting_draw)
async def set_draw(message: Message, state: FSMContext):
    try:
        dt = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        timestamp = int(dt.timestamp())
        chat_id = str(message.chat.id)
        lang = get_lang(chat_id)
        
        with get_db() as db:
            db.execute('UPDATE games SET draw_time = ? WHERE chat_id = ?', (timestamp, chat_id))
        
        scheduler.add_job(do_draw, 'date', run_date=dt, args=[chat_id])
        await message.reply(get_text('draw_set', lang, time=message.text))
        await message.reply(get_text('setup_prompt_reveal', lang))
        await state.set_state(SetupState.waiting_reveal)
    except:
        await message.reply(get_text('invalid_date', lang))

@dp.message(SetupState.waiting_reveal)
async def set_reveal(message: Message, state: FSMContext):
    try:
        dt = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        timestamp = int(dt.timestamp())
        chat_id = str(message.chat.id)
        lang = get_lang(chat_id)
        
        with get_db() as db:
            db.execute('UPDATE games SET end_time = ? WHERE chat_id = ?', (timestamp, chat_id))
        
        scheduler.add_job(finish_game, 'date', run_date=dt, args=[chat_id])
        await message.reply(get_text('reveal_set', lang, time=message.text))
        await state.clear()
    except:
        await message.reply(get_text('invalid_date', lang))

async def do_draw(chat_id):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –∂–µ—Ä–µ–±—å–µ–≤–∫—É –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        with get_db() as db:
            players = db.execute('SELECT user_id FROM players WHERE chat_id = ?', (chat_id,)).fetchall()
            if len(players) < 2:  # –ú–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await bot.send_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ (–º–∏–Ω–∏–º—É–º 2)")
                return
            
            user_ids = [p['user_id'] for p in players]
            random.shuffle(user_ids)
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ–¥–∞—Ä–∫–æ–≤
            for i in range(len(user_ids)):
                giver = user_ids[i]
                receiver = user_ids[(i + 1) % len(user_ids)]
                db.execute('UPDATE players SET target_id = ? WHERE user_id = ? AND chat_id = ?', (receiver, giver, chat_id))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            for i in range(len(user_ids)):
                try:
                    target = db.execute('''
                        SELECT p.nick, p.gift FROM players p
                        WHERE p.user_id = ? AND p.chat_id = ?
                    ''', (user_ids[(i + 1) % len(user_ids)], chat_id)).fetchone()
                    
                    msg = f"üéÅ –í–∞—à –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞: {target['nick']}\n"
                    if target['gift']:
                        msg += f"üìù –ò—Ö –∂–µ–ª–∞–Ω–∏–µ: {target['gift']}"
                    else:
                        msg += "üìù –ñ–µ–ª–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                    
                    await bot.send_message(user_ids[i], msg)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_ids[i]}: {e}")
            
            lang = get_lang(chat_id)
            await bot.send_message(chat_id, get_text('draw_done', lang))
            logger.info(f"–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏: {e}")
        await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏")

async def finish_game(chat_id):
    lang = get_lang(chat_id)
    results = get_text('final_intro', lang)
    
    with get_db() as db:
        players = db.execute('''
            SELECT p.user_id, p.nick, p.score, p.full_name FROM players p
            WHERE p.chat_id = ?
            ORDER BY p.score DESC
        ''', (chat_id,)).fetchall()
        
        for p in players:
            achievements = db.execute('SELECT name FROM achievements WHERE player_id = ?', (p['user_id'],)).fetchall()
            ach_list = ", ".join([a['name'] for a in achievements]) if achievements else "‚Äî"
            results += f"üë§ {p['nick']} | ‚≠ê {p['score']} | üèÜ {ach_list}\n"
        
        for p in players:
            if p['score'] >= 5:
                db.execute('INSERT OR IGNORE INTO achievements (player_id, name) VALUES (?, ?)', (p['user_id'], get_text('ach_guess_master', lang)))
            if p['score'] >= 10:
                db.execute('INSERT OR IGNORE INTO achievements (player_id, name) VALUES (?, ?)', (p['user_id'], get_text('ach_legend', lang)))
    
    await bot.send_message(chat_id, results)

@dp.message(F.new_chat_members)
async def on_join(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        for user in message.new_chat_members:
            if user.is_bot: 
                continue
            
            chat_id = str(message.chat.id)
            user_id = str(user.id)
            full_name = f"{user.first_name} {user.last_name}" if user.last_name else user.first_name
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
            with get_db() as db:
                game = db.execute('SELECT theme FROM games WHERE chat_id = ?', (chat_id,)).fetchone()
                if not game:
                    continue  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
                
                theme = game['theme']
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            success = await register_user(user_id, chat_id, full_name, theme)
            
            if success:
                with get_db() as db:
                    player = db.execute('SELECT nick FROM players WHERE user_id = ? AND chat_id = ?', (user_id, chat_id)).fetchone()
                    nick = player['nick'] if player else "Unknown"
                
                lang = get_lang(chat_id)
                await message.answer(f"üëã {full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ —Å –Ω–∏–∫–æ–º {nick}!")
                logger.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.message(F.text)
async def auto_register_on_activity(message: Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã
        if message.chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
            return
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if message.text and message.text.startswith('/'):
            return
        
        chat_id = str(message.chat.id)
        user_id = str(message.from_user.id)
        full_name = f"{message.from_user.first_name} {message.from_user.last_name}" if message.from_user.last_name else message.from_user.first_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
        with get_db() as db:
            game = db.execute('SELECT theme FROM games WHERE chat_id = ?', (chat_id,)).fetchone()
            if not game:
                return  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            existing = db.execute('SELECT 1 FROM players WHERE user_id = ? AND chat_id = ?', (user_id, chat_id)).fetchone()
            if existing:
                return  # –£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            
            theme = game['theme']
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        success = await register_user(user_id, chat_id, full_name, theme)
        
        if success:
            with get_db() as db:
                player = db.execute('SELECT nick FROM players WHERE user_id = ? AND chat_id = ?', (user_id, chat_id)).fetchone()
                nick = player['nick'] if player else "Unknown"
            
            lang = get_lang(chat_id)
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {full_name} ({user_id}) —Å –Ω–∏–∫–æ–º {nick} –≤ —á–∞—Ç–µ {chat_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

@dp.message(Command("mygift"))
async def mygift(message: Message, state: FSMContext):
    lang = get_lang(message.chat.id)
    await message.reply(get_text('gift_prompt', lang))
    await state.set_state(GiftState.waiting)

@dp.message(GiftState.waiting)
async def set_gift(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂–µ–ª–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    try:
        user_id = str(message.from_user.id)
        chat_id = str(message.chat.id)
        lang = get_lang(chat_id)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        gift_text = sanitize_input(message.text, max_length=500)
        if not gift_text or len(gift_text.strip()) < 3:
            await message.reply("‚ùå –ñ–µ–ª–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        with get_db() as db:
            db.execute('UPDATE players SET gift = ? WHERE user_id = ? AND chat_id = ?', (gift_text, user_id, chat_id))
        
        await message.reply(get_text('gift_saved', lang))
        await state.clear()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∂–µ–ª–∞–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è.")

@dp.message(Command("santabingo"))
async def santabingo(message: Message):
    chat_id = str(message.chat.id)
    lang = get_lang(chat_id)
    
    with get_db() as db:
        players = db.execute('SELECT nick, user_id FROM players WHERE chat_id = ?', (chat_id,)).fetchall()
        targets = [p for p in players if p['user_id'] != str(message.from_user.id)]
        if not targets: return
        
        target = random.choice(targets)
        kb = []
        shuffled = random.sample(players, len(players))
        for p in shuffled:
            kb.append([InlineKeyboardButton(text=p['nick'], callback_data=f"guess_{target['user_id']}_{p['user_id']}")])
        
        await message.reply(get_text('santabingo_intro', lang, nick=target['nick']), reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@dp.callback_query(F.data == "join_game")
async def join_game(callback):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ"""
    try:
        chat_id = str(callback.message.chat.id)
        user_id = str(callback.from_user.id)
        full_name = f"{callback.from_user.first_name} {callback.from_user.last_name}" if callback.from_user.last_name else callback.from_user.first_name
        lang = get_lang(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏–≥—Ä—ã
        with get_db() as db:
            game = db.execute('SELECT theme FROM games WHERE chat_id = ?', (chat_id,)).fetchone()
            if not game:
                await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", show_alert=True)
                return
            
            theme = game['theme']
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await register_user(user_id, chat_id, full_name, theme)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            with get_db() as db:
                player = db.execute('SELECT nick FROM players WHERE user_id = ? AND chat_id = ?', (user_id, chat_id)).fetchone()
                nick = player['nick'] if player else "Unknown"
            
            await callback.answer(get_text('joined_game', lang).format(nick=nick), show_alert=True)
        else:
            await callback.answer(get_text('already_joined', lang), show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        with get_db() as db:
            result = db.execute('SELECT COUNT(*) as cnt FROM players WHERE chat_id = ?', (chat_id,)).fetchone()
            count = result['cnt'] if result else 0
        
        new_message = get_text('auto_register_call', lang).format(count=count)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÑ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ", callback_data="join_game")]
        ])
        
        await callback.message.edit_text(new_message, reply_markup=kb)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", show_alert=True)

@dp.callback_query(F.data.startswith("guess_"))
async def process_guess(callback):
    _, target_id, selected_id = callback.data.split("_")
    user_id = str(callback.from_user.id)
    chat_id = str(callback.message.chat.id)
    lang = get_lang(chat_id)
    
    correct = target_id == selected_id
    with get_db() as db:
        if correct:
            db.execute('UPDATE players SET score = score + 1 WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
            await callback.message.edit_text(get_text('guess_correct', lang))
        else:
            name = db.execute('SELECT full_name FROM players WHERE user_id = ? AND chat_id = ?', (target_id, chat_id)).fetchone()
            await callback.message.edit_text(get_text('guess_wrong', lang, name=name['full_name'] if name else "Unknown"))
    await callback.answer()

@dp.message(Command("leaderboard"))
async def leaderboard(message: Message):
    chat_id = str(message.chat.id)
    lang = get_lang(chat_id)
    
    with get_db() as db:
        players = db.execute('''
            SELECT nick, score FROM players
            WHERE chat_id = ?
            ORDER BY score DESC
            LIMIT 10
        ''', (chat_id,)).fetchall()
        
        if not players:
            await message.reply("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞")
            return
        
        player_list = ""
        for i, p in enumerate(players, 1):
            player_list += f"{i}. {p['nick']} ‚Äî {p['score']} –æ—á–∫–æ–≤\n"
        
        text = get_text('leaderboard', lang, list=player_list)
    
    await message.reply(text)

@dp.message(Command("premium"))
async def premium(message: Message, state: FSMContext):
    chat_id = str(message.chat.id)
    lang = get_lang(chat_id)
    theme = get_theme(chat_id)
    
    if theme not in PREMIUM_NICKS[lang]:
        await message.reply("‚ùå –¢–µ–º–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return
    
    nicks = PREMIUM_NICKS[lang][theme]
    kb = [[InlineKeyboardButton(text=f"‚ú® {n}", callback_data=f"buy_{n}")] for n in nicks]
    await message.reply(get_text('premium_intro', lang), reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    await state.set_state(PremiumState.choosing)

@dp.callback_query(F.data.startswith("buy_"))
async def buy_nick(callback, state: FSMContext):
    nick = callback.data.replace("buy_", "")
    chat_id = str(callback.message.chat.id)
    lang = get_lang(chat_id)
    
    with get_db() as db:
        if db.execute('SELECT 1 FROM players WHERE premium_nick = ? AND chat_id = ?', (nick, chat_id)).fetchone():
            await callback.message.edit_text(get_text('premium_sold', lang))
            return
    
    prices = [LabeledPrice(label="–ü—Ä–µ–º–∏—É–º-–Ω–∏–∫", amount=50)]
    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫",
        description=f"–ù–∏–∫: {nick}",
        provider_token="",
        currency="XTR",
        prices=prices,
        payload=f"premium_{nick}_{chat_id}",
        need_name=False
    )
    await state.update_data(pending_nick=nick, chat_id=chat_id)

@dp.pre_checkout_query()
async def checkout(query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(query.id, ok=True)

@dp.message(F.successful_payment)
async def success_pay(message: Message):
    data = message.successful_payment.invoice_payload
    parts = data.split("_")
    if len(parts) < 3:
        return
    nick = "_".join(parts[1:-1])
    chat_id = parts[-1]
    user_id = str(message.from_user.id)
    
    with get_db() as db:
        player = db.execute('SELECT chat_id FROM players WHERE user_id = ?', (user_id,)).fetchone()
        if not player or player['chat_id'] != chat_id:
            await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
            return
        
        if db.execute('SELECT 1 FROM players WHERE premium_nick = ? AND chat_id = ?', (nick, chat_id)).fetchone():
            await message.answer("üö´ –≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –∫—É–ø–ª–µ–Ω.")
            return
        
        db.execute('UPDATE players SET nick = ?, premium_nick = ? WHERE user_id = ? AND chat_id = ?', 
                  (nick, nick, user_id, chat_id))
    
    lang = get_lang(chat_id)
    await message.answer(get_text('nick_unlocked', lang, nick=nick))

@dp.message(Command("info"))
async def game_info(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ"""
    chat_id = str(message.chat.id)
    
    with get_db() as db:
        game = db.execute('SELECT * FROM games WHERE chat_id = ?', (chat_id,)).fetchone()
        if not game:
            await message.reply("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return
        
        players_count = db.execute('SELECT COUNT(*) as cnt FROM players WHERE chat_id = ?', (chat_id,)).fetchone()['cnt']
        
        info_text = f"üéÆ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ**\n\n"
        info_text += f"üé® –¢–µ–º–∞: {game['theme']}\n"
        info_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {players_count}\n"
        
        if game['draw_time']:
            draw_dt = datetime.fromtimestamp(game['draw_time'])
            info_text += f"üé≤ –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞: {draw_dt.strftime('%d.%m.%Y %H:%M')}\n"
        
        if game['end_time']:
            end_dt = datetime.fromtimestamp(game['end_time'])
            info_text += f"üéä –†–∞—Å–∫—Ä—ã—Ç–∏–µ: {end_dt.strftime('%d.%m.%Y %H:%M')}\n"
        
        info_text += f"üåç –Ø–∑—ã–∫: {game['lang']}"
    
    await message.reply(info_text, parse_mode=ParseMode.MARKDOWN)

@dp.message(Command("lang"))
async def change_lang(message: Message):
    chat_id = str(message.chat.id)
    with get_db() as db:
        db.execute('UPDATE games SET lang = ? WHERE chat_id = ?', ('en' if get_lang(chat_id) == 'ru' else 'ru', chat_id))
    lang = get_lang(chat_id)
    await message.reply(get_text('lang_changed', lang))

@dp.message(Command("donate"))
async def donate(message: Message):
    lang = get_lang(message.chat.id)
    prices = [LabeledPrice(label=f"{amt} –∑–≤—ë–∑–¥", amount=amt) for amt in [1, 10, 25, 50, 100, 500, 1000, 5000]]
    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞",
        description="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
        provider_token="",
        currency="XTR",
        prices=prices,
        payload="donation",
        need_name=False
    )

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ===
@dp.error()
async def error_handler(event: ErrorEvent):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è aiogram 3.x"""
    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {event.update}: {event.exception}")
    logger.error(traceback.format_exc())
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if hasattr(event.update, 'message') and event.update.message:
            await event.update.message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif hasattr(event.update, 'callback_query') and event.update.callback_query:
            await event.update.callback_query.message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

# === –°–ò–°–¢–ï–ú–ê –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –ö–û–ù–§–õ–ò–ö–¢–û–í ===
async def check_bot_conflicts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ä–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –¥—Ä—É–≥–∏–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ –±–æ—Ç–∞"""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"Bot info: {bot_info.first_name} (@{bot_info.username}) - Instance: {INSTANCE_ID}")
        
        # –û—á–∏—â–∞–µ–º webhook –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–º–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å polling)
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            logger.warning(f"Webhook –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {webhook_info.url}. –£–¥–∞–ª—è–µ–º –¥–ª—è polling...")
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook —É–¥–∞–ª–µ–Ω, polling –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
        
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {e}")
        return False

async def aggressive_conflict_cleanup():
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º"""
    logger.info(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–ª—è Instance: {INSTANCE_ID}")
    
    cleanup_attempts = 3
    for attempt in range(cleanup_attempts):
        try:
            logger.info(f"üßπ –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {attempt + 1}/{cleanup_attempts}")
            
            # 1. –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å
            webhook_info = await bot.get_webhook_info()
            if webhook_info.url:
                logger.warning(f"üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω webhook: {webhook_info.url}")
                await bot.delete_webhook(drop_pending_updates=True)
                logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω —Å drop_pending_updates=True")
            
            # 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ pending updates
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏ —Å–±—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await bot.get_updates(offset=-1, limit=1, timeout=1)
                logger.info("‚úÖ Pending updates –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                logger.debug(f"–ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ: –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ updates: {e}")
            
            # 3. –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt < cleanup_attempts - 1:
                await asyncio.sleep(2)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < cleanup_attempts - 1:
                await asyncio.sleep(3)
    
    logger.info("üßπ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def robust_polling():
    """–£—Å—Ç–æ–π—á–∏–≤—ã–π polling —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    max_restarts = 3
    restart_count = 0
    
    while restart_count < max_restarts:
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ robust polling (—Ä–µ—Å—Ç–∞—Ä—Ç {restart_count + 1}/{max_restarts})")
            
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å—Ç–∞—Ä—Ç–æ–º
            await aggressive_conflict_cleanup()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            await asyncio.sleep(5)
            
            logger.info("üîÑ –°—Ç–∞—Ä—Ç—É–µ–º dp.start_polling...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π polling aiogram (–æ–Ω —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç retry)
            await dp.start_polling(
                bot, 
                handle_signals=False,
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                allowed_updates=dp.resolve_used_update_types()
            )
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π - polling —Ä–∞–±–æ—Ç–∞–µ—Ç
            logger.info("‚úÖ Polling –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            break
            
        except Exception as e:
            error_msg = str(e)
            restart_count += 1
            
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling: {e}")
            
            if "Conflict" in error_msg or "terminated by other getUpdates" in error_msg:
                logger.error(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –†–µ—Å—Ç–∞—Ä—Ç {restart_count}/{max_restarts}")
                
                if restart_count < max_restarts:
                    wait_time = 10 * restart_count  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É
                    logger.info(f"‚è≥ –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
                    await asyncio.sleep(wait_time)
                else:
                    logger.error("üö® –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤")
                    raise
            else:
                logger.error(f"üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                raise
    
    if restart_count >= max_restarts:
        error_msg = f"""
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ—Å–ª–µ {max_restarts} –ø–æ–ø—ã—Ç–æ–∫!

üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å —Ç–µ–º –∂–µ —Ç–æ–∫–µ–Ω–æ–º
2. –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º  
3. –•–æ—Å—Ç–∏–Ω–≥ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
4. Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ

üí° –†–µ—à–µ–Ω–∏—è:
1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook –Ω–∞ –ø—É—Å—Ç–æ–π URL: /setWebhook?url=

Instance ID: {INSTANCE_ID}
"""
        logger.error(error_msg)
        raise RuntimeError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –∑–∞–ø—É—Å–∫–∞ –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")

# === –ó–ê–ü–£–°–ö ===
async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        init_db()
        await set_bot_commands()
        scheduler.start()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        if not await check_bot_conflicts():
            raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –±–æ—Ç–∞")
        
        logger.info(f"‚úÖ Secret Santa Bot –∑–∞–ø—É—â–µ–Ω (Instance: {INSTANCE_ID})")
        print(f"‚úÖ Secret Santa Bot –∑–∞–ø—É—â–µ–Ω (Instance: {INSTANCE_ID})")
        
        # –£—Å—Ç–æ–π—á–∏–≤—ã–π –∑–∞–ø—É—Å–∫ polling —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        await robust_polling()
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise
    finally:
        try:
            scheduler.shutdown()
            await bot.session.close()
        except:
            pass

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise